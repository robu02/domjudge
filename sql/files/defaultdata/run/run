#!/bin/sh

# Run wrapper-script called from 'testcase_run.sh'.
# See that script for more info.
#
# Usage: $0 <testin> <progout> <program>...
#
# <testin>    File containing test-input.
# <progout>   File where to write solution output.
# <program>   Command and options of the program to be run.

TESTIN="$1";  shift
PROGOUT="$1"; shift
STATIC="$1"; shift

# Run the program while redirecting input/output.
# Note that "$@" expands to separate, quoted arguments.

# Modifications:
# If the test input contains the special header, it will perform a different action than the default
# Static analyzers will be executed before the default execution
# For the instrumentation, the code has to be compiled and executed with flags
# For each, the default run has to be executed to avoid triggering warnings
# Otherwise, the default run is executed

# Getting the header
header=$(head -n 1 "$TESTIN" | tr -d '[:space:]')


if [ "$header" = "#1#" ]; then # static analyzers
		#indicating in static.info that we ran the static analyzers
        echo "#1#" > "$STATIC"

		# clang-tidy
		clang-tidy -checks=* --export-fixes=clangtidy.yaml $(find execdir/ -type f ! -name "program")

		# cppcheck
		cppcheck --xml --output-file=cppcheck.xml --enable=all --quiet $(find execdir/ -type f ! -name "program")
		
		#removing the header
		tail -n +2 "$TESTIN" > temp && mv temp "$TESTIN"

        # has to be included to avoid errors
		exec "$@" < "$TESTIN" > "$PROGOUT"
elif [ "$header" = "#2#" ]; then # ubsan
        echo "#2#" > "$STATIC"

        #gcc "$FILE" -o auxec -fsanitize=address (-static-libasan) -g
            
        #gcc -fsanitize=undefined "$FILE" 2> "ubsan.log"
        cd execdir/
        g++ -fsanitize=undefined $(find . -type f ! -name "program") -o auxec 
        cd ..
        
        #removing the header
        tail -n +2 "$TESTIN" > temp && mv temp "$TESTIN"
        
        execdir/auxec< "$TESTIN" 2>"ubsan.log"
        
        exec "$@" < "$TESTIN" > "$PROGOUT"
elif [ "$header" = "#3#" ]; then # asan
        echo "#3#" > "$STATIC"

        #gcc "$FILE" -o auxec -fsanitize=address (-static-libasan) -g
            
        #gcc -fsanitize=undefined "$FILE" 2> "ubsan.log"
        cd execdir/
        g++ -fsanitize=address $(find . -type f ! -name "program") -o auxec 
        cd ..
        
        #removing the header
        tail -n +2 "$TESTIN" > temp && mv temp "$TESTIN"
        
        execdir/auxec < "$TESTIN" 2>"asan.log"
        
        exec "$@" < "$TESTIN" > "$PROGOUT"
elif [ "$header" = "#4#" ]; then # static and ubsan
        echo "#4#" > "$STATIC"

        #gcc "$FILE" -o auxec -fsanitize=address (-static-libasan) -g
            
        #gcc -fsanitize=undefined "$FILE" 2> "ubsan.log"
        cd execdir/
        g++ -fsanitize=undefined $(find . -type f ! -name "program") -o auxec 
        cd ..
        
        # clang-tidy
		clang-tidy -checks=* --export-fixes=clangtidy.yaml $(find execdir/ -type f ! -name "program")

		# cppcheck
		cppcheck --xml --output-file=cppcheck.xml --enable=all --quiet $(find execdir/ -type f ! -name "program")
        
        #removing the header
        tail -n +2 "$TESTIN" > temp && mv temp "$TESTIN"
        
        execdir/auxec < "$TESTIN" 2>"ubsan.log"
        
        exec "$@" < "$TESTIN" > "$PROGOUT"
elif [ "$header" = "#5#" ]; then # static and asan
        echo "#5#" > "$STATIC"

        #gcc "$FILE" -o auxec -fsanitize=address (-static-libasan) -g
            
        #gcc -fsanitize=undefined "$FILE" 2> "ubsan.log"
        cd execdir/
        g++ -fsanitize=address $(find . -type f ! -name "program") -o auxec 
        cd ..
        
        # clang-tidy
		clang-tidy -checks=* --export-fixes=clangtidy.yaml $(find execdir/ -type f ! -name "program")

		# cppcheck
		cppcheck --xml --output-file=cppcheck.xml --enable=all --quiet $(find execdir/ -type f ! -name "program")
        
        #removing the header
        tail -n +2 "$TESTIN" > temp && mv temp "$TESTIN"
        
        execdir/auxec < "$TESTIN" 2>"asan.log"
        
        exec "$@" < "$TESTIN" > "$PROGOUT"
elif [ "$header" = "#6#" ]; then # static and asan
        echo "#6#" > "$STATIC"

        #gcc "$FILE" -o auxec -fsanitize=address (-static-libasan) -g
            
        #gcc -fsanitize=undefined "$FILE" 2> "ubsan.log"
        cd execdir/
        g++ -fsanitize=undefined $(find . -type f ! -name "program") -o auxecub
        g++ -fsanitize=address $(find . -type f ! -name "program" ! -name "auxecub") -o auxecad
        cd ..
        
        #removing the header
        tail -n +2 "$TESTIN" > temp && mv temp "$TESTIN"
        
        execdir/auxecad < "$TESTIN" 2>"asan.log"
        execdir/auxecub < "$TESTIN" 2>"ubsan.log"
        
        exec "$@" < "$TESTIN" > "$PROGOUT"
elif [ "$header" = "#7#" ]; then # static and asan
        echo "#7#" > "$STATIC"

        #gcc "$FILE" -o auxec -fsanitize=address (-static-libasan) -g
            
        #gcc -fsanitize=undefined "$FILE" 2> "ubsan.log"
        cd execdir/
        g++ -fsanitize=undefined $(find . -type f ! -name "program") -o auxecub
        g++ -fsanitize=address $(find . -type f ! -name "program" ! -name "auxecub") -o auxecad
        cd ..
        
        # clang-tidy
		clang-tidy -checks=* --export-fixes=clangtidy.yaml $(find execdir/ -type f ! -name "program" ! -name "auxecub" ! -name "auxecad")

		# cppcheck
		cppcheck --xml --output-file=cppcheck.xml --enable=all --quiet $(find execdir/ -type f ! -name "program" ! -name "auxecub" ! -name "auxecad")
        
        #removing the header
        tail -n +2 "$TESTIN" > temp && mv temp "$TESTIN"
        
        execdir/auxecad < "$TESTIN" 2>"asan.log"
        execdir/auxecub < "$TESTIN" 2>"ubsan.log"
        
        exec "$@" < "$TESTIN" > "$PROGOUT"
else
	# indicating in static.info that we executed a default run
    echo "#7#" > "$STATIC"
    exec "$@" < "$TESTIN" > "$PROGOUT"
fi
