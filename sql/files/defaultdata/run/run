#!/bin/sh

# Run wrapper-script called from 'testcase_run.sh'.
# See that script for more info.
#
# Usage: $0 <testin> <progout> <program>...
#
# <testin>    File containing test-input.
# <progout>   File where to write solution output.
# <program>   Command and options of the program to be run.

TESTIN="$1";  shift
PROGOUT="$1"; shift

# Run the program while redirecting input/output.
# Note that "$@" expands to separate, quoted arguments.

# Modifications:
# If the test input contains the special header, it will perform a different action than the default
# Static analyzers will be executed before the default execution
# For the instrumentation, the code has to be compiled and executed with flags
# For each, the default run has to be executed to avoid triggering warnings
# Otherwise, the default run is executed

# checking for the header
header=$(head -n 1 "$TESTIN" | tr -d '[:space:]')
static="0"
ubsan="0"
asan="0"
start_of_heading=$(printf "\x01")
# getting the run option
if [ "$header" = "$start_of_heading" ]; then
    option=$(sed -n '2p' "$TESTIN")
    static=$(echo "$option" | cut -c1)
    ubsan=$(echo "$option" | cut -c2)
    asan=$(echo "$option" | cut -c3)
fi


if [ "$static" = "1" ]; then # static analyzers
		#indicating in static.info that we ran the static analyzers
        #echo "#1#" > "$STATIC"

		# clang-tidy
		clang-tidy -checks=* --export-fixes=clangtidy.yaml $(find execdir/ -type f ! -name "program")

		# cppcheck
		cppcheck --xml --output-file=cppcheck.xml --enable=all --quiet $(find execdir/ -type f ! -name "program")
		

		# tail -n +3 "$TESTIN" | "$@" > "$PROGOUT"
fi
if [ "$ubsan" = "1" ]; then # ubsan
        #echo "#2#" > "$STATIC"

        #gcc "$FILE" -o auxec -fsanitize=address (-static-libasan) -g
            
        #gcc -fsanitize=undefined "$FILE" 2> "ubsan.log"
        cd execdir/
        g++ -fsanitize=undefined $(find . -type f ! -name "program") -o auxecub 
        cd ..
        
        tail -n +3 "$TESTIN" | execdir/auxecub 2>"ubsan.log"
        rm execdir/auxecub
        
        # tail -n +3 "$TESTIN" | "$@" > "$PROGOUT"
fi
if [ "$asan" = "1" ]; then # asan
        #echo "#3#" > "$STATIC"

        #gcc "$FILE" -o auxec -fsanitize=address (-static-libasan) -g
            
        #gcc -fsanitize=undefined "$FILE" 2> "ubsan.log"
        cd execdir/
        g++ -fsanitize=address $(find . -type f ! -name "program" ) -o auxecas 
        cd ..
        
        tail -n +3 "$TESTIN" | execdir/auxecas 2>"asan.log"
        rm execdir/auxecas
        
        # tail -n +3 "$TESTIN" | "$@" > "$PROGOUT"
fi
if [ "$header" = "$start_of_heading" ]; then
    tail -n +3 "$TESTIN" | "$@" > "$PROGOUT"
else
	# indicating in static.info that we executed a default run
    # echo "#7#" > "$STATIC"
    exec "$@" < "$TESTIN" > "$PROGOUT"
fi
